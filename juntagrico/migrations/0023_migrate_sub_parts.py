# Generated by Django 3.0.3 on 2020-03-14 06:22
import itertools

from django.db import migrations
from django.utils import timezone

from juntagrico.util.temporal import start_of_specific_business_year


def migrate_parts(apps, schema_editor):
    Subscription = apps.get_model('juntagrico', 'Subscription')
    SubscriptionPart = apps.get_model('juntagrico', 'SubscriptionPart')
    for sub in Subscription.objects.all():
        # activation date missing
        if (sub.active or sub.deactivation_date is not None) and sub.activation_date is None:
            if sub.start_date is not None:
                sub.activation_date = sub.start_date
            else:
                start_date = sub.creation_date
                start_date.year += 1
                sub.activation_date = start_of_specific_business_year(start_date)
        # cancellation date missing
        if sub.cancelation_date is None and sub.deactivation_date is not None:
            sub.cancelation_date = sub.deactivation_date
        elif sub.canceled and sub.cancelation_date is None:
            sub.cancelation_date = timezone.now().date()
        sub.save()
        c_types = analyze_types(sub.types.all())
        f_types = analyze_types(sub.future_types.all())
        types = set()
        types.update(c_types.keys())
        types.update(f_types.keys())
        for type in types:
            c_count = c_types.get(type, 0)
            f_count = f_types.get(type, 0)
            if c_count == f_count:
                a_part = create_a_part(SubscriptionPart, sub, type)
                SubscriptionPart.objects.bulk_create(itertools.chain(*[[a_part] * c_count]))
            elif c_count > f_count:
                a_part = create_a_part(SubscriptionPart, sub, type)
                c_part = create_c_part(SubscriptionPart, sub, type)
                SubscriptionPart.objects.bulk_create(itertools.chain(*[[a_part] * f_count]))
                SubscriptionPart.objects.bulk_create(itertools.chain(*[[c_part] * (c_count - f_count)]))
            else:
                a_part = create_a_part(SubscriptionPart, sub, type)
                w_part = create_w_part(SubscriptionPart, sub, type)
                SubscriptionPart.objects.bulk_create(itertools.chain(*[[a_part] * c_count]))
                SubscriptionPart.objects.bulk_create(itertools.chain(*[[w_part] * (f_count - c_count)]))


def create_a_part(part_class, sub, type):
    return part_class(subscription=sub,
                      type=type,
                      creation_date=sub.creation_date,
                      activation_date=sub.activation_date,
                      cancellation_date=sub.cancelation_date,
                      deactivation_date=sub.deactivation_date)


def create_c_part(part_class, sub, type):
    return part_class(subscription=sub,
                      type=type,
                      creation_date=sub.creation_date,
                      activation_date=sub.activation_date,
                      cancellation_date=timezone.now().date(),
                      deactivation_date=sub.deactivation_date)


def create_w_part(part_class, sub, type):
    return part_class(subscription=sub,
                      type=type,
                      creation_date=sub.creation_date,
                      activation_date=None,
                      cancellation_date=None,
                      deactivation_date=None)


def analyze_types(types):
    analyzed_types = {}
    for type in types:
        analyzed_types[type] = analyzed_types.get(type, 0) + 1
    return analyzed_types


def migrate_extras(apps, schema_editor):
    ExtraSubscription = apps.get_model('juntagrico', 'ExtraSubscription')
    for sub in ExtraSubscription.objects.all():
        if sub.cancellation_date is None and sub.deactivation_date is not None:
            sub.cancellation_date = sub.deactivation_date
        elif sub.canceled and sub.cancellation_date is None:
            sub.cancellation_date = timezone.now().date()
        if sub.activation_date is not None:
            sub.creation_date = sub.activation_date
        sub.save()


class Migration(migrations.Migration):

    dependencies = [
        ('juntagrico', '0022_subscriptionpart'),
    ]

    operations = [
        migrations.RunPython(migrate_parts),
        migrations.RunPython(migrate_extras),
    ]

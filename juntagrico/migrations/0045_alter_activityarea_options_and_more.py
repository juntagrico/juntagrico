# Generated by Django 4.2.18 on 2025-06-01 13:52
from django.contrib.auth.management import create_permissions
from django.db import migrations, models
import django.db.models.deletion


def has_perm(apps, user, perm):
    permission = apps.get_model('auth', 'Permission')
    perm = permission.objects.get(codename=perm)
    return user.user_permissions.filter(codename=perm.codename).exists() or user.groups.filter(permissions=perm).exists()


def migrate_coordinators(apps, schema_editor):
    activity_area = apps.get_model('juntagrico', 'ActivityArea')
    area_coordinator = apps.get_model('juntagrico', 'AreaCoordinator')
    user = apps.get_model('auth', 'User')
    for area in activity_area.objects.all():
        coordinator = user.objects.get(pk=area.coordinator.user.pk)
        is_area_admin = has_perm(apps, coordinator, 'is_area_admin')
        can_change_area = has_perm(apps, coordinator, 'change_activityarea')
        can_change_job = (
            has_perm(apps, coordinator, 'change_recuringjob') or
            has_perm(apps, coordinator, 'change_onetimejob')
        )
        area_coordinator.objects.create(
            area=area,
            member=area.coordinator,
            can_modify_area=can_change_area,
            can_view_member=is_area_admin,
            can_contact_member=is_area_admin,
            can_remove_member=can_change_area,
            can_modify_jobs=is_area_admin and can_change_job,
            can_modify_assignments=is_area_admin and has_perm(apps, coordinator, 'change_assignment'),
        )


def migrate_email_attachment_permission(apps, schema_editor):
    # make sure new permissions are created first
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=0)
        app_config.models_module = None

    # distribute new permission
    permission = apps.get_model('auth', 'Permission')
    old_perm = permission.objects.filter(codename__in=('is_area_admin', 'is_operations_group'))
    new_perm = permission.objects.get(codename='can_email_attachments')

    user = apps.get_model('auth', 'User')
    for u in user.objects.filter(user_permissions__in=old_perm):
        u.user_permissions.add(new_perm)

    group = apps.get_model('auth', 'Group')
    for g in group.objects.filter(permissions__in=old_perm):
        g.permissions.add(new_perm)


class Migration(migrations.Migration):

    dependencies = [
        ('juntagrico', '0044_merge_20250504_1043'),
    ]

    operations = [
        migrations.AlterField(
            model_name='areacoordinator',
            name='area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coordinator_access',
                                    to='juntagrico.activityarea'),
        ),
        migrations.AlterField(
            model_name='areacoordinator',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='area_access',
                                    to='juntagrico.member'),
        ),
        migrations.AlterModelOptions(
            name='specialroles',
            options={'default_permissions': (), 'managed': False,
                     'permissions': (('is_operations_group', 'Benutzer ist in der BG'),
                                     ('is_book_keeper', 'Benutzer ist Buchhalter'),
                                     ('can_send_mails', 'Benutzer kann im System E-Mails versenden'),
                                     ('can_email_attachments', 'Benutzer kann Anhänge per E-Mail senden'),
                                     ('can_use_general_email', 'Benutzer kann allgemeine E-Mail-Adresse verwenden'),
                                     ('can_use_for_members_email',
                                      'Benutzer kann E-Mail-Adresse "for_members" verwenden'),
                                     ('can_use_for_subscriptions_email',
                                      'Benutzer kann E-Mail-Adresse "for_subscription" verwenden'),
                                     ('can_use_for_shares_email',
                                      'Benutzer kann E-Mail-Adresse "for_shares" verwenden'),
                                     ('can_use_technical_email', 'Benutzer kann technische E-Mail-Adresse verwenden'),
                                     ('depot_list_notification',
                                      'Benutzer wird bei Depot-Listen-Erstellung informiert'),
                                     ('can_view_exports', 'Benutzer kann Exporte öffnen'),
                                     ('can_view_lists', 'Benutzer kann Listen öffnen'),
                                     ('can_generate_lists', 'Benutzer kann Listen erzeugen'))},
        ),
        migrations.RunPython(migrate_coordinators),
        migrations.RunPython(migrate_email_attachment_permission),
        migrations.AlterModelOptions(
            name='activityarea',
            options={'ordering': ['sort_order'], 'verbose_name': 'Tätigkeitsbereich', 'verbose_name_plural': 'Tätigkeitsbereiche'},
        ),
        migrations.RemoveField(
            model_name='activityarea',
            name='coordinator',
        ),
    ]
